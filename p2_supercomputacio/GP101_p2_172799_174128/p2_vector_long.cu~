#include "stdio.h"
#define N 67000
#define MIN(a,b) (a < b?a:b )

__global__ void add(int *a, int *b, int *c)
{
	int tid = threadIdx.x + blockIdx.x * blockDim.x; //El id del thread es el id que tiene ese thread dentro de un bloque
	c[tid]=a[tid]+b[tid];							 //El id del bloque es el id que tiene ese bloque dentro del grid			
}													 //La dimension del bloque es el numero de threads que tiene cada bloque

int main()
{
	int a[N], b[N], c[N];//host 
	int *dev_a, *dev_b, *dev_c;//device

	cudaMalloc((void**)&dev_a, N*sizeof(int) );  
	cudaMalloc((void**)&dev_b, N*sizeof(int) );
	cudaMalloc((void**)&dev_c, N*sizeof(int) );


	for (int i = 0; i < N; i++){
		a[i] = i,
		b[i] = 1;
	}

	cudaMemcpy(dev_a, a, N*sizeof(int), cudaMemcpyHostToDevice); //host to device
	cudaMemcpy(dev_b, b, N*sizeof(int), cudaMemcpyHostToDevice);
	
	//Calculamos el mÃ¡ximo divisor menor o igual a 512 de N 
	//Podemos hacer esto o hacer que los threads que obtengan un tid mayor a N no modifiquen el vector
	int threads_block = MIN(512,N);
	while(N%threads_block != 0)--threads_block;
	if(threads_block == 1 ){ //si el valor de N es un numero primo,  deberemos calcular de nuevo las dimensiones
		int n = N + 1;
		threads_block = MIN(512,N);
		while(n%threads_block != 0)--threads_block;
		int blocks = n / threads_block;
		add<<<blocks,threads_block>>>(dev_a,dev_b,dev_c);
	}
	
	int blocks = N / threads_block;
	add<<<blocks,threads_block>>>(dev_a,dev_b,dev_c); 

	//Call CUDA kernel
	cudaMemcpy(c, dev_c, N*sizeof(int), cudaMemcpyDeviceToHost);//Copy memory from device to host
	//copy array to host
	for (int i = 0; i < N; i++)
		printf("%d + %d = %d\n", a[i], b[i], c[i]);
	
	cudaFree(dev_a);//free device mem
	cudaFree(dev_b);
	cudaFree(dev_c);

	return 0;

}
